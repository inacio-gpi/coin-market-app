// Mocks generated by Mockito 5.4.6 from annotations
// in coin_market_app/test/unit/features/exchanges/presentation/bloc/exchange_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:coin_market_app/core/errors/failures.dart' as _i6;
import 'package:coin_market_app/features/exchanges/domain/entities/exchange_asset.dart'
    as _i7;
import 'package:coin_market_app/features/exchanges/domain/entities/exchange_info.dart'
    as _i9;
import 'package:coin_market_app/features/exchanges/domain/repositories/exchange_repository.dart'
    as _i2;
import 'package:coin_market_app/features/exchanges/domain/usecases/get_exchange_assets.dart'
    as _i4;
import 'package:coin_market_app/features/exchanges/domain/usecases/get_exchange_info.dart'
    as _i8;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeExchangeRepository_0 extends _i1.SmartFake
    implements _i2.ExchangeRepository {
  _FakeExchangeRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetExchangeAssets].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetExchangeAssets extends _i1.Mock implements _i4.GetExchangeAssets {
  MockGetExchangeAssets() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ExchangeRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeExchangeRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ExchangeRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.ExchangeAsset>>> call(
    int? exchangeId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [exchangeId]),
            returnValue:
                _i5.Future<
                  _i3.Either<_i6.Failure, List<_i7.ExchangeAsset>>
                >.value(
                  _FakeEither_1<_i6.Failure, List<_i7.ExchangeAsset>>(
                    this,
                    Invocation.method(#call, [exchangeId]),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, List<_i7.ExchangeAsset>>>);
}

/// A class which mocks [GetExchangeInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetExchangeInfo extends _i1.Mock implements _i8.GetExchangeInfo {
  MockGetExchangeInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ExchangeRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeExchangeRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ExchangeRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i9.ExchangeInfo>> call(int? exchangeId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [exchangeId]),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, _i9.ExchangeInfo>>.value(
                  _FakeEither_1<_i6.Failure, _i9.ExchangeInfo>(
                    this,
                    Invocation.method(#call, [exchangeId]),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i9.ExchangeInfo>>);
}
